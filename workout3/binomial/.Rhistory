bin_cumulative =  function(n,p){
suc = 0:n
prob = bin_probability(n,suc,p)
prob_cum = rep(0,n+1)
prob_cum[1] = prob[1]
for(i in 2:11){
prob_cum[i] = prob[i-1] + prob[i]
}
dat2 = data.frame(success = suc, probability = prob, cumulative = prob_cum)
class(dat2) = c("bincum", "data.frame")
return(dat2)
}
bin_cumulative(10,0.1)
bin_cumulative(5,0.5)
bin_cumulative =  function(n,p){
suc = 0:n
prob = bin_probability(n,suc,p)
prob_cum = rep(0,n+1)
prob_cum[1] = prob[1]
for(i in 2:n+1){
prob_cum[i] = prob[i-1] + prob[i]
}
dat2 = data.frame(success = suc, probability = prob, cumulative = prob_cum)
class(dat2) = c("bincum", "data.frame")
return(dat2)
}
bin_cumulative(5,0.5)
#check the probability
check_prob = function(prob){
if(class(prob) != "numeric"){
stop("invalid prob value")
}
if(prob <= 1 & prob >= 0){
return(T)
}
else{
stop("invalid prob value")
}
}
#check the times
check_trials = function(x){
if(as.integer(x) == x & x >= 0){
return(T)
}
else{
stop("invalid trial times")
}
}
#check the success times
check_success = function(suc,tri){
valid = T
for(i in 1:length(suc)){
if(!(as.integer(suc[i]) == suc[i] & suc[i] >= 0 &suc[i] <= tri)){
valid = FALSE
}
}
if(valid){
return(T)
}
else{
stop("invalid success times")
}
}
aux_mean = function(tri, prob){
return(tri * prob)
}
aux_mean = function(tri, prob){
return(tri * prob)
}
aux_varriance = function(tri, prob){
return(n * p *(p-1))
}
aux_mean = function(tri, prob){
return(tri * prob)
}
aux_varriance = function(tri, prob){
return(n * p *(p-1))
}
aux_mode = function(tri, prob){
x = tri * prob
if(is.integer(x)){
return(c(x, x - 1))
}
else{
return(sa.integer(x))
}
}
aux_skewness = function(n, p){
return((1 - 2 * p) / (n * p * (1 - p)) ^ 0.5)
}
aux_Kurtosis = function(n, p){
return((1 - 6 * p * (1-p)) / (n * p * (1-p)))
}
#' @title calculate the choosing number
#' @description calculate the choosing number given the number of success and total trials
#' @param n the times of trials
#' @param k the times of success
#' @return the number of combinations
#' @export
#' @example
#' n = 5
#' k = 3
#' bin_choose(n,k) #calculating the number of combinations of choosing 2 objects among 5.
bin_choose = function(n,k){
check_trials(n)
check_success(k,n)
x = factorial(n)
y = factorial(n - k) * factorial(k)
return(x / y)
}
bin_probability = function(n,k,p){
check_prob(p)
check_success(k,n)
check_prob(p)
x = bin_choose(n,k) * p ^ k * (1 - p) ^ (n - k)
return(x)
}
bin_distribution = function(n, p){
suc = 0:n
prob = bin_probability(n,suc,p)
dat1 = data.frame(success = suc, probability = prob)
class(dat1) = c("bindis", "data.frame")
return(dat1)
}
bin_distribution(5,0.5)
bin_cumulative =  function(n,p){
suc = 0:n
prob = bin_probability(n,suc,p)
prob_cu = rep(0,n + 1)
prob_cu[1] = prob[1]
for(i in 2:n+1){
prob_cu[i] = prob_cu[i-1] +prob[i]
}
dat2 = data.frame(success = suc, probability = prob, cumulative = prob_cum)
class(dat2) = c("bincum", "data.frame")
return(dat2)
}
bin_cumulative(5,0.5)
bin_cumulative =  function(n,p){
suc = 0:n
prob = bin_probability(n,suc,p)
prob_cu = rep(0,n + 1)
prob_cu[1] = prob[1]
for(i in 2:n+1){
prob_cu[i] = prob_cu[i-1] +prob[i]
}
dat2 = data.frame(success = suc, probability = prob, cumulative = prob_cu)
class(dat2) = c("bincum", "data.frame")
return(dat2)
}
bin_cumulative(5,0.5)
bin_cumulative =  function(n,p){
suc = 0:n
prob = bin_probability(n,suc,p)
prob
prob_cu = rep(0,n + 1)
prob_cu[1] = prob[1]
for(i in 2:n+1){
prob_cu[i] = prob_cu[i-1] +prob[i]
}
dat2 = data.frame(success = suc, probability = prob, cumulative = prob_cu)
class(dat2) = c("bincum", "data.frame")
return(dat2)
}
bin_cumulative(5,0.5)
bin_cumulative =  function(n,p){
suc = 0:n
prob = bin_probability(n,suc,p)
prob_cu = rep(0,n + 1)
prob_cu[1] = prob[1]
for(i in 2:n+1){
prob_cu[i] = prob_cu[i-1] +prob[i]
}
dat2 = data.frame(success = suc, probability = prob, cumulative = prob_cu)
class(dat2) = c("bincum", "data.frame")
return(prob)
}
bin_cumulative(5,0.5)
bin_cumulative =  function(n,p){
suc = 0:n
prob = bin_probability(n,suc,p)
prob_cu = rep(0,n + 1)
prob_cu[1] = prob[1]
for(i in 2:n+1){
prob_cu[i] = prob_cu[i-1] +prob[i]
}
dat2 = data.frame(success = suc, probability = prob, cumulative = prob_cu)
class(dat2) = c("bincum", "data.frame")
return(dat2)
}
bin_cumulative(5,0.5)
bin_cumulative =  function(n,p){
suc = 0:n
prob = bin_probability(n,suc,p)
prob_cu = rep(0,n + 1)
prob_cu[1] = prob[1]
prob_cu[2] = prob[2] + prob_cu[1]
for(i in 2:n+1){
prob_cu[i] = prob_cu[i-1] +prob[i]
}
dat2 = data.frame(success = suc, probability = prob, cumulative = prob_cu)
class(dat2) = c("bincum", "data.frame")
return(dat2)
}
bin_cumulative(5,0.5)
bin_cumulative =  function(n,p){
suc = 0:n
prob = bin_probability(n,suc,p)
prob_cu = rep(0,n + 1)
prob_cu[1] = prob[1]
for(i in 1:n+1){
prob_cu[i] = prob_cu[i-1] +prob[i]
}
dat2 = data.frame(success = suc, probability = prob, cumulative = prob_cu)
class(dat2) = c("bincum", "data.frame")
return(dat2)
}
bin_cumulative(5,0.5)
bin_cumulative =  function(n,p){
suc = 0:n
prob = bin_probability(n,suc,p)
prob_cu = rep(0,n + 1)
prob_cu[1] = prob[1]
for(i in 2:(n+1)){
prob_cu[i] = prob_cu[i-1] +prob[i]
}
dat2 = data.frame(success = suc, probability = prob, cumulative = prob_cu)
class(dat2) = c("bincum", "data.frame")
return(dat2)
}
bin_cumulative(5,0.5)
plot.bindis = function(x,...){
library(ggplot2)
ggplot(x,aes(x = success, y = probability))+
geom_bar()+
xlab("Times of success")+
ylab("Probability")
invisible(x)
}
plot(bin_distribution(10,0.1))
plot(bin_distribution(10,0.1))
plot(bin_distribution(10,0.1))
bin_distribution(10,0.1)
plot.bindis = function(x,...){
plot(x$success, x$probability, type = "h")
}
x = bin_distribution(5,0.5)
x = bin_distribution(5,0.5)
x = bin_distribution(5,0.5)
plot(X)
plot(x)
?plot
plot.bindis = function(x,...){
plot(x$success, x$probability, type = "l")
}
x = bin_distribution(5,0.5)
plot(x)
plot.bindis = function(x,...){
library(ggplot2)
ggplot(x, aes(x = success, y = probability))+
geom_col()
}
plot(x)
plot.bindis = function(x,...){
library(ggplot2)
ggplot(x, aes(x = success, y = probability))+
geom_col()+
xlab("times of success")
}
plot(x)
s = bin_distribution(5,0.5)
plot(S)
plot(s)
s = bin_distribution(7,0.5)
plot(s)
plot.bincum = function(y, ...){
plot(y$success, y$cumulative, type = "l", xlab = "times of success", ylab = "cumulative probability")
}
s2 = bin_cumulative(5,0.5)
plot(s2)
plot(y$success, y$cumulative, type = "b", xlab = "times of success", ylab = "cumulative probability")
plot(s2)
plot.bincum = function(y, ...){
plot(y$success, y$cumulative, type = "b", xlab = "times of success", ylab = "cumulative probability")
}
plot(s2)
bin_variable = function(n,p){
check_trials(n)
check_prob(p)
binvariabale = list(trials = n, prob = p)
class(binvariable) = "binvar"
return(binvariabale)
}
bin_variable(5,0.5)
bin_variable = function(n,p){
check_trials(n)
check_prob(p)
binvariable = list(trials = n, prob = p)
class(binvariable) = "binvar"
return(binvariable)
}
bin_variable(5,0.5)
print.binvar = function(x,...){
cat("Binomial variable\n")
cat("\n")
cat("Parameters\n")
cat("- number of trials:", x[[1]], "\n")
cat("- prob of success:", x[[2]], "\n")
}
s3 = bin_variable(5,0.5)
s3
print.binvar = function(x,...){
cat('"Binomial variable"\n')
cat("\n")
cat("Parameters\n")
cat("- number of trials:", x[[1]], "\n")
cat("- prob of success:", x[[2]], "\n")
}
s3 = bin_variable(5,0.5)
s3
View(aux_mode)
summary.binvar = function(x,...){
cat("-trials:", x[[1]], "\n")
cat("-prob:", x[[2]], "\n")
cat("-mean:", aux_mean(x[[1]],x[[2]]),"\n")
cat("-variance:", aux_varriance(x[[1]],x[[2]]),"\n")
cat("-mode:", aux_mode(x[[1]],x[[2]]),"\n")
cat("-skewness:", aux_skewness(x[[1]],x[[2]]),"\n")
cat("-kurtosis:", aux_Kurtosis(x[[1]],x[[2]]),"\n")
}
summary(s3)
aux_varriance = function(n, p){
return(n * p *(p-1))
}
summary(s3)
aux_mode = function(tri, prob){
x = tri * prob
if(is.integer(x)){
return(c(x, x - 1))
}
else{
return(as.integer(x))
}
}
summary(s3)
aux_varriance = function(n, p){
return(n * p *(1-p))
}
summary(s3)
print.summary.binvar = function(x,...){
cat('"Binomial variable"\n')
cat("\n")
cat("Parameters\n")
cat("- number of trials:", x[[1]], "\n")
cat("- prob of success:", x[[2]], "\n")
cat("\n")
cat("-mean:", x$mean, "\n")
cat("-variance:", x$variance, "\n")
cat("-mode:", x$mode, "\n")
cat("-skewness:", x$skewness, "\n")
cat("-kurtosis:", x$kurtosis, "\n")
}
s4 = summary(s3)
s4
s3 = bin_variable(10,0.3)
s4 = summary(s3)
summary.binvar = function(x,...){
a = x[[1]]
b = x[[2]]
object = list(trials = x[[1]], prob = x[[2]], mean = aux_mean(a,b), variance = aux_varriance(a,b), mode = aux_mode(a,b), skewness = aux_skewness(a,b), kurtosis = aux_Kurtosis(a,b))
class(object) = "summary.binvar"
return(object)
}
s3 = bin_variable(10,0.3)
s4 = summary(s3)
s4
aux_mode = function(tri, prob){
x = tri * prob
if(as.integer(x) == x){
return(c(x, x - 1))
}
else{
return(as.integer(x))
}
}
s3 = bin_variable(10,0.3)
s4 = summary(s3)
s4
bin_mean = function(n,p){
check_prob(p)
check_trials(n)
aux_mean(n,p)
}
bin_variance = function(n,p){
check_prob(p)
check_trials(n)
aux_varriance(n,p)
}
bin_mode = function(n,p){
check_prob(p)
check_trials(n)
aux_mode(n,p)
}
bin_skewness = function(n,p){
check_prob(p)
check_trials(n)
aux_skewness(n,p)
}
bin_kurtosis= function(n,p){
check_prob(p)
check_trials(n)
aux_Kurtosis(n,p)
}
bin_mean(5,0.5)
bin_choose(5,1:3)
check_prob = function(prob){
if(length(prob) > 1){
stop("invalid prob value")
}
if(class(prob) != "numeric"){
stop("invalid prob value")
}
if(prob <= 1 & prob >= 0){
return(T)
}
else{
stop("invalid prob value")
}
}
library(testthat)
heck_trials = function(x){
if(length(x) > 1){
stop("invalid trial times")
}
if(as.integer(x) == x & x >= 0){
return(T)
}
else{
stop("invalid trial times")
}
}
check_trials = function(x){
if(length(x) > 1){
stop("invalid trial times")
}
if(as.integer(x) == x & x >= 0){
return(T)
}
else{
stop("invalid trial times")
}
}
class(aux_mean(19,0.1))
aux_varriance(10,0.2)
aux_skewness(10,0.2)
length(bin_distribution(10,0.1))
22
bin_distribution(10,1.1)
expect_is(bin_distribution(10,1),c("bindis", "dataframe"))
expect_is(bin_distribution(10,1),c("bindis", "datafram"))
bin_probability(10,1:3,0.1)
bin_probability(10,3,0.1)
bin_probability(n = 10, k=4, p = 0.1)
bin_probability(10,1:3,0.1)
print(bin_variable(10,0.1))
s = summary(bin_variable(10,0.5))
s
bin_distribution(5,0.5)
s2 = bin_distribution(5,0.5)
s2
plot(s2)
plot.bindis = function(x,...){
library(ggplot2)
ggplot(x, aes(x = success, y = probability))+
geom_bar()+
xlab("times of success")
}
plot(s2)
plot.bindis = function(x,...){
library(ggplot2)
ggplot(x, aes(x = success, y = probability))+
geom_col()+
xlab("times of success")
}
plot(s2)
s3 = bin_cumulative(10,0.1)
s3
plot(s3)
plot.bindis = function(x,...){
barplot(x$probability, names.arg = x$success,xlab = "times of success", ylab = "probability")
}
plot(bin_distribution(5,0.5))
getwd()
devtools::document()
install.packages("devtools")
library(devtools)
devtools::document()
devtools::check_man()
devtools::test()
devtools::test()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
getwd()
devtools::build_vignettes()
devtools::use_vignette("introduction")
devtools::build_vignettes()
install.packages("Rtools")
devtools::build()
library(binomial)
getwd()
